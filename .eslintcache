[{"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/index.js":"1","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/App.js":"2","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/registerServiceWorker.js":"3","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/Parent.js":"4","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/APIRoot.js":"5","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/NewShow/NewShow.js":"6","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/About/About.js":"7","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/ShowsList/ShowsList.js":"8","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/Song/Song.js":"9","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/SongsList/SongsList.js":"10","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/Show/Show.js":"11","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/Stats/Stats.js":"12","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/LogIn/LogIn.js":"13","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/SignUp/SignUp.js":"14","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/axios.js":"15","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/SongTitle/SongTitle.js":"16","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/ShowCard/ShowCard.js":"17","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/FilterDropdown/FilterDropdown.js":"18","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/DeleteButton/DeleteButton.js":"19","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/AddMediaDialog/AddMediaDialog.js":"20","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/Photo/Photo.js":"21","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/MusicPlayer/MusicPlayer.js":"22","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/Video/Video.js":"23","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/AudioRec/AudioRec.js":"24","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/FormatHelper.js":"25"},{"size":815,"mtime":1609820041123,"results":"26","hashOfConfig":"27"},{"size":383,"mtime":1605554641061,"results":"28","hashOfConfig":"27"},{"size":4022,"mtime":1508426994000,"results":"29","hashOfConfig":"27"},{"size":4436,"mtime":1609655636839,"results":"30","hashOfConfig":"27"},{"size":199,"mtime":1609820441960,"results":"31","hashOfConfig":"27"},{"size":7605,"mtime":1609617449354,"results":"32","hashOfConfig":"27"},{"size":654,"mtime":1605484242282,"results":"33","hashOfConfig":"27"},{"size":5832,"mtime":1609714530786,"results":"34","hashOfConfig":"27"},{"size":2555,"mtime":1609656765879,"results":"35","hashOfConfig":"27"},{"size":1579,"mtime":1609656831348,"results":"36","hashOfConfig":"27"},{"size":13563,"mtime":1609656775360,"results":"37","hashOfConfig":"27"},{"size":5179,"mtime":1609656594019,"results":"38","hashOfConfig":"27"},{"size":2906,"mtime":1609629970513,"results":"39","hashOfConfig":"27"},{"size":2858,"mtime":1609433510237,"results":"40","hashOfConfig":"27"},{"size":589,"mtime":1609820038388,"results":"41","hashOfConfig":"27"},{"size":598,"mtime":1595628330000,"results":"42","hashOfConfig":"27"},{"size":1491,"mtime":1594414549000,"results":"43","hashOfConfig":"27"},{"size":469,"mtime":1594993853000,"results":"44","hashOfConfig":"27"},{"size":1044,"mtime":1605555221246,"results":"45","hashOfConfig":"27"},{"size":2011,"mtime":1604247256059,"results":"46","hashOfConfig":"27"},{"size":1065,"mtime":1609621283304,"results":"47","hashOfConfig":"27"},{"size":2331,"mtime":1601951121630,"results":"48","hashOfConfig":"27"},{"size":1090,"mtime":1609657338132,"results":"49","hashOfConfig":"27"},{"size":1276,"mtime":1605555218949,"results":"50","hashOfConfig":"27"},{"size":482,"mtime":1594414196000,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"10xuex8",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"54"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"115"},"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/index.js",[],["116","117"],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/App.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/registerServiceWorker.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/Parent.js",["118"],"import React, { Component } from 'react';\nimport { Route, NavLink, Switch, FadeIn } from 'react-router-dom';\n\nimport './Parent.scss';\nimport ShowsList from './ShowsList/ShowsList';\nimport NewShow from './NewShow/NewShow';\nimport About from './About/About';\nimport Show from './Show/Show';\nimport SongsList from './SongsList/SongsList';\nimport Song from './Song/Song';\nimport Stats from './Stats/Stats';\nimport LogIn from './LogIn/LogIn';\nimport SignUp from './SignUp/SignUp';\nimport axios from 'axios';\n\nclass Parent extends Component {\n    state = {\n        loggedIn: false\n    }\n\n    componentDidMount () {\n        if (localStorage.getItem('auth_token') && !this.state.loggedIn) {\n            this.setState({\n                loggedIn: true\n            });\n        }\n    }\n\n    handleLogIn = (credentials) => {\n        return axios.post(\"authenticate\", credentials).then(response => {\n            if (response.data.auth_token) {\n                localStorage.setItem(\"auth_token\", response.data.auth_token);\n                this.setState({\n                    loggedIn: true\n                });\n            }\n        });\n    }\n\n    logOut = () => {\n        localStorage.removeItem(\"auth_token\");\n        this.setState({\n            loggedIn: false\n        });\n    }\n\n    render () {\n        return (\n            <div className=\"Parent\">\n                <header>\n                    <nav>\n                        <ul className=\"main\">\n                            <li><NavLink\n                                to=\"/about\"\n                                >About</NavLink></li>\n                            <li><NavLink\n                                to=\"/shows\"\n                                >Shows</NavLink></li>\n                            {/* <li><NavLink\n                                to=\"/bps/\"\n                                >Band Practices</NavLink></li>\n                            <li><NavLink\n                                to=\"/studio/\"\n                                >Studio Recordings</NavLink></li> */}\n                            <li><NavLink\n                                to=\"/stats\"\n                                >Stats</NavLink></li>\n                            {this.state.loggedIn ?\n                                <li><NavLink to={{\n                                    pathname: '/upload',\n                                    hash: '#submit'\n                                }}>Add a Show</NavLink></li> : \"\"}\n                            <li><NavLink\n                                to=\"/songs\"\n                                >Songs</NavLink></li>\n                        </ul>\n                        <ul className=\"login\">\n                            {this.state.loggedIn ?\n                                <li><NavLink\n                                    to=\"/logout\"\n                                    onClick={this.logOut.bind(this)}\n                                    >Log Out</NavLink></li> :\n                                <li><NavLink\n                                    to=\"/login\"\n                                    >Log In</NavLink></li>}\n                        </ul>\n                    </nav>\n                </header>\n                <Switch>\n                    <Route path=\"/about\" component={About} />\n                    <Route path=\"/shows\" component={ShowsList} />\n                    <Route path=\"/upload/:id\" component={NewShow} />\n                    <Route path=\"/upload\" component={NewShow} />\n                    <Route path=\"/show/:id\" component={Show} />\n                    <Route path=\"/songs\" component={SongsList} />\n                    <Route path=\"/song/:id\" component={Song} />\n                    <Route path=\"/stats\" component={Stats} />\n                    <Route \n                        path=\"/logout\"\n                        render={routeProps => (\n                            <ShowsList {...routeProps} loggingOut />\n                        )}>\n                    </Route>\n                    <Route \n                        path=\"/login\"\n                        render={routeProps => (\n                            <LogIn \n                                {...routeProps} \n                                handleLogIn={this.handleLogIn.bind(this)}\n                            />)}>\n                    </Route>\n                    <Route path=\"/signup\" component={SignUp} />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default Parent;","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/APIRoot.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/NewShow/NewShow.js",["119","120","121","122"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\nimport { Button, Form, Input, TextArea, Accordion, Dropdown } from 'semantic-ui-react'\nimport _ from 'lodash';\n\nimport './NewShow.scss';\nimport 'react-semantic-ui-datepickers/dist/react-semantic-ui-datepickers.css';\nimport SongTitle from '../../../components/SongTitle/SongTitle';\nimport DeleteButton from \"components/DeleteButton/DeleteButton\";\n\nclass NewShow extends Component {\n    state = {\n        showData: {\n            date: '',\n            venue: '',\n            setlist: []\n        },\n        routeToShow: false,\n        showID: 0,\n        songsList: [],\n        loading: true,\n    }\n\n    componentDidMount () {\n        this.loadData();\n        this.getAllSongs();\n    }\n\n    loadData () {\n        if ( this.props.match.params.id ) {\n            axios.get( 'shows/' + this.props.match.params.id )\n                .then( response => {\n                    this.setState({\n                        showData: response.data\n                    });\n                    this.updatePositions();\n                })\n                .finally( () => {\n                    this.setState( { \n                        loading: false\n                    });\n                });\n        }\n    }\n\n\n    postDataHandler = () => {\n        axios.post('shows', this.state.showData)\n            .then(response => {\n                this.setState({\n                    routeToShow: true,\n                    showID: response.data.id\n                });\n            });\n    }\n\n    updateHandler = () => {\n        axios.put('shows/' + this.props.match.params.id, this.state.showData)\n            .then(response => {\n                this.setState({\n                    routeToShow: true,\n                    showID: response.data.id\n                });\n            });\n    }\n\n    handleSelectDate = date => {\n        this.setState({\n            date: date\n        });\n    };\n\n    handleChange (field, value) {\n        let showData = this.state.showData;\n        showData[field] = value;\n        if (field != \"setlist\") {\n            this.setState({\n                showData: showData\n            });\n        }\n    }\n\n    getAllSongs() {\n        axios.get(\"songs\")\n            .then(response => {\n                const songsList = response.data.map((song, i) => ({\n                    key: i,\n                    text: song.title,\n                    value: song.id\n                }));\n                this.setState({\n                    songsList: songsList\n                });\n            });\n    }\n\n    updatePositions() {\n        const showData = this.state.showData;\n        const setlist = showData.setlist;\n        const sortedSetlist = [];\n        for (let i = 1; i <= 3; i++) {\n            let currentSet = setlist.filter(song => song.set === i);\n            if (currentSet.length > 0) {\n                let sortedSet = currentSet.sort((a, b) => a.position - b.position);\n                sortedSetlist.push(...sortedSet);\n            }\n        }\n        sortedSetlist.forEach((song, i) => {\n            song.tempPosition = i\n        })\n        showData.setlist = sortedSetlist;\n        this.setState({\n            showData: showData\n        })\n    }\n\n    addSong(setNumber, e, dropdownSelection) {\n        const showData = this.state.showData;\n        const setlist = showData.setlist;\n        const song = dropdownSelection.options.find( song => song.value === dropdownSelection.value );\n\n        const formattedSong = {\n            id: song.value,\n            title: song.text,\n            set: setNumber\n        }\n        setlist.push(formattedSong);\n        this.updatePositions();\n    }\n\n    deleteSong(props) {\n        const setlist = this.state.showData.setlist;\n        setlist.splice(props.song.tempPosition, 1);\n        this.updatePositions();\n        this.setState({\n            showData: this.state.showData\n        });\n    }\n\n    render () {\n        if (this.state.routeToShow === true) {\n            return <Redirect to={'/show/' +  this.state.showID}/>\n        }\n\n        const selectSongDropdown = setNumber => {\n            const songsList = this.state.songsList.sort((a, b) => (a.text > b.text) ? 1 : -1);\n            return <Dropdown\n                placeholder='Select Song'\n                search\n                selection\n                options={songsList}\n                onChange={this.addSong.bind(this, setNumber)}\n            />\n        }\n\n        const songsListed = setNumber => {\n            return this.state.showData.setlist\n                .filter(song => song.set === setNumber)\n                .map((song, i) => {\n                    let last = false\n                    if (i === this.state.showData.setlist.length - 1) {\n                        last = true;\n                    }\n                    return (\n                        <div key={i}>\n                            <SongTitle \n                                song={song} \n                                last={last} \n                                vertical \n                                button \n                                deleteSong={this.deleteSong.bind(this)}/>\n                        </div>\n                    )\n                })\n        };\n\n        return (\n            <div className=\"NewShow\">\n                <Form>\n                    {this.props.match.params.id ? <h1>Edit Show Details</h1> : <h1>Add a Show</h1>}\n                    <Form.Field>\n                        <label>Date</label>\n                        <input \n                            type=\"date\" \n                            className=\"ui calendar\" \n                            value={this.state.showData.date} \n                            onChange={(event) => this.handleChange(\"date\", event.target.value)}/>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Venue</label>\n                        <Input value={this.state.showData.venue} onChange={(event) => this.handleChange(\"venue\", event.target.value)} />\n                    </Form.Field>\n                    <Form.Field>\n                        <label>First Set</label>\n                        {selectSongDropdown(1)}\n                        <div className=\"songs-listed\">\n                            {songsListed(1)}\n                        </div>\n                    </Form.Field>\n                        <Form.Field>\n                        <label>Second Set</label>\n                        {selectSongDropdown(2)}\n                        <div className=\"songs-listed\">\n                            {songsListed(2)}\n                        </div>\n                    </Form.Field>\n                    <Form.Field>\n                        <label>Encore</label>\n                        {selectSongDropdown(3)}\n                        <div className=\"songs-listed\">\n                            {songsListed(3)}\n                        </div>\n                    </Form.Field>\n                    {this.props.match.params.id ? \n                        <div className=\"submit-button\">\n                            <Button className=\"save-button\" type=\"Submit\" onClick={this.updateHandler}>Save</Button>\n                            <DeleteButton history={this.props.history} id={this.props.match.params.id} /> \n                        </div> :\n                        <div className=\"submit-button\">\n                            <Button type=\"Submit\" onClick={this.postDataHandler}>Add Show</Button>\n                        </div>}\n                </Form>\n            </div>\n        );\n    }\n}\n\nexport default NewShow;","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/About/About.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/ShowsList/ShowsList.js",["123","124"],"import React, { Component } from 'react';\nimport axios from '../../../axios';\nimport { Link } from 'react-router-dom';\nimport { Card, Dropdown, Form, Message, Loader, Dimmer } from 'semantic-ui-react';\nimport _ from 'lodash';\n\nimport './ShowsList.scss';\nimport ShowCard from '../../../components/ShowCard/ShowCard';\nimport FilterDropdown from '../../../components/FilterDropdown/FilterDropdown';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nclass ShowsList extends Component {\n    state = {\n        shows: [],\n        venuesList: [],\n        yearsList: [],\n        filterAndSort: {\n            year_filter: \"\",\n            venue_filter: \"\",\n            sort_order: \"most_recent\"\n        },\n        loading: false\n    }\n\n    componentDidMount() {\n        this.sortFilterFetch(this.state.filterAndSort);\n    }\n\n    getYears() {\n        axios.get(\"years\")\n            .then(response => {\n                const yearsList = response.data.map((year, i) => ({\n                    key: i,\n                    text: year.toString(),\n                    value: year.toString()\n                }));\n                this.setState({\n                    yearsList\n                })\n            });\n    }\n\n    getVenues() {\n        axios.get(\"venues\")\n            .then(response => {\n                const venuesList = response.data.map((venue, i) => ({\n                    key: i,\n                    text: venue,\n                    value: venue\n                }));\n                this.setState({\n                    venuesList: _.uniqBy(venuesList, \"value\")\n                });\n            });\n    }\n\n    filterYear(e, data) {\n        this.sortFilterFetch({...this.state.filterAndSort, year_filter: data.value});\n    }\n\n    filterVenue(e, data) {\n        this.sortFilterFetch({...this.state.filterAndSort, venue_filter: data.value});\n    }\n    \n    sort(e, data) {\n        this.sortFilterFetch({...this.state.filterAndSort, sort_order: data.value});\n    }\n\n    sortFilterFetch(params) {\n        this.setState({\n            loading: true\n        });\n        axios.post(\"filtered_shows\", params)\n            .then( response => {\n                this.setState({ \n                    shows: response.data,\n                    filterAndSort: {...params},\n                    loading: false\n                });\n            })\n            .catch(error => {\n                this.setState({\n                    loading: false\n                });\n            })\n    }\n\n    render() {\n        let showCards = <p style={{ textAlign: 'center' }}>Something went wrong!</p>;\n        if ( !this.state.error ) {\n            showCards = this.state.shows.map( (show, i) => {\n                let date = show.date? new Date(show.date + \" EST\").toLocaleDateString() : \"\";\n                return (\n                    <Link className=\"ui card fluid\" to={'/show/' + show.id} key={i}>\n                        <ShowCard\n                            key={i}\n                            id={show.id}\n                            show={show}\n                            date={date}\n                        />\n                    </Link>\n                )\n            });\n        }\n\n        const sortOptions = [\n            {\n                key: \"most_recent\",\n                text: \"Most Recent\",\n                value: \"most_recent\"\n            },\n            {\n                key: \"oldest\",\n                text: \"Oldest\",\n                value: \"oldest\"\n            }\n        ];\n\n        return (\n                <div>\n                    {this.props.loggingOut ? \n                        <Message\n                            success\n                            header=\"Wepa!\"\n                            content=\"You have successfully logged out.\"\n                        /> : \"\"}\n                    <section className=\"ShowsList\">\n                        <div className=\"filters\">\n                            <Form>\n                                <Form.Group widths=\"equal\">\n                                    <FilterDropdown\n                                        placeholder=\"Year\"\n                                        onClick={this.getYears.bind(this)}\n                                        options={this.state.yearsList}\n                                        onChange={this.filterYear.bind(this)}/>\n                                    <FilterDropdown\n                                        placeholder=\"Venue\"\n                                        onClick={this.getVenues.bind(this)}\n                                        options={this.state.venuesList}\n                                        onChange={this.filterVenue.bind(this)}/>\n                                    <Form.Select\n                                        placeholder=\"Sort\"\n                                        selection\n                                        options={sortOptions}\n                                        onChange={this.sort.bind(this)}/>\n                                </Form.Group>\n                            </Form>\n                        </div>\n                        {this.state.loading ? \n                            <Loader active>Loading</Loader> :\n                            <CSSTransitionGroup\n                                transitionName=\"fade\"\n                                transitionAppear={true}\n                                transitionAppearTimeout={500}\n                                transitionEnter={false}\n                                transitionLeave={false}>\n                                <div className=\"cards\">\n                                    <Card.Group>{showCards}</Card.Group>\n                                </div>\n                            </CSSTransitionGroup>\n                        }\n                    </section>\n                </div>\n        );\n    }\n}\n\nexport default ShowsList;","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/Song/Song.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/SongsList/SongsList.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/Show/Show.js",["125","126","127","128","129","130","131","132","133","134","135","136"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Button, Embed, Loader} from 'semantic-ui-react'\nimport { Link, useHistory } from 'react-router-dom';\nimport AddMediaDialog from \"components/AddMediaDialog/AddMediaDialog\";\nimport Photo from \"components/Photo/Photo\";\nimport Video from \"components/Video/Video\";\nimport MusicPlayer from \"components/MusicPlayer/MusicPlayer\";\nimport AudioRec from \"components/AudioRec/AudioRec\";\nimport {CloudinaryContext} from 'cloudinary-react';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport _ from \"lodash\";\n\nimport './Show.scss';\n\nclass Show extends Component {\n    state = {\n        loadedShow: {},\n        loadedYouTubeVideos: false,\n        youTubeVideos: [],\n        photos: [],\n        audioRecs: [],\n        videos: [],\n        songsList: [],\n        musicPlayer: {\n            publicID: \"\",\n            title: \"\"\n        },\n        loading: false\n    }\n\n    componentDidMount() {\n        this.showID = this.props.match.params.id;\n        this.loadShowData();\n        this.loadYouTubeVideos();\n        this.getAllSongs();\n        this.loadPhotos();\n        this.loadVideos();\n        this.loadAudioRecs();\n    }\n\n    loadShowData () {\n        this.setState({\n            loading: true\n        });\n        if (this.showID && _.isEmpty(this.state.loadedShow)) {\n                axios.get(`shows/${this.showID}`)\n                    .then(response => {\n                        this.setState({\n                            loadedShow: response.data,\n                            loading: false\n                        });\n                    }).catch(() => {\n                        this.setState({\n                            loadedShow: \"notfound\",\n                            loading: false\n                        });\n                    });\n        }\n    }\n\n    loadYouTubeVideos() {\n        if ( this.showID ) {\n            axios.get(\"get_videos/\" + this.showID)\n                .then( (response) => {\n                    this.setState({\n                        youTubeVideos: response.data,\n                        loadedYouTubeVideos: true\n                    });\n                });\n        }\n    }\n\n    loadPhotos() {\n        if ( this.showID ) {\n            axios.get(`photos_from_show/${this.showID}`)\n                .then(res => {\n                    this.setState({photos: res.data.resources});\n                });\n        }\n    }\n\n    loadVideos() {\n        if ( this.showID ) {\n            axios.get(`videos_from_show/${this.showID}`)\n                .then(res => {\n                    this.setState({videos: res.data});\n                });\n        }\n    }\n\n    loadAudioRecs() {\n        if ( this.showID ) {\n            axios.get(`audio_recs_from_show/${this.showID}`)\n                .then(res => {\n                    this.setState({audioRecs: res.data});\n                });\n        }\n    }\n\n    getAllSongs() {\n        axios.get(\"songs\")\n            .then(response => {\n                const songsList = response.data.map((song, i) => ({\n                    key: i,\n                    text: song.title,\n                    value: song.id\n                }));\n                this.setState({\n                    songsList: songsList\n                });\n            });\n    }\n\n    createSongLinks(setNumber) {\n        let songs = this.state.loadedShow.setlist.filter(song => song.set === setNumber);\n        if (songs.length > 0) {\n            return songs.map((song, i) => {\n                let addComma = (i < songs.length - 1);\n                return (\n                    <span key={i}>\n                        <Link to={`/song/${song.id}`}>\n                            {song.title}\n                        </Link>\n                        {addComma ? \", \" : \"\"}\n                    </span>\n                    )\n            })\n        }\n    }\n\n    handleSubmit(videoData) {\n        videoData.show_id = this.showID;\n        axios.post('videos', videoData).then( (response) => \n            this.setState({\n                youTubeVideos: this.state.youTubeVideos.concat(response.data)\n            })\n        );\n    }\n\n    generateSignature(callback, params_to_sign) {\n        axios.post(\"generate_signature\", params_to_sign).then( response => {\n            callback(response.data.signature);\n        })\n    }\n\n    openUploadWidget() {\n        window.cloudinary.openUploadWidget(\n            { \n                cloud_name: \"gmg-archive-project\",\n                sources: [\"local\", \"url\", \"facebook\", \"instagram\", \"google_drive\", \"dropbox\"], \n                upload_preset: \"gmg-uploads\",\n                apiKey: \"119581295779122\",\n                tags: [this.showID],\n                uploadSignature: this.generateSignature\n            },\n            function(error, result) {\n                if (result.event === \"success\") {\n                    if (result.info.is_audio) {\n                        this.setState({audioRecs: [result.info, ...this.state.audioRecs]})\n                    } else {\n                        this.setState({photos: [result.info, ...this.state.photos]});\n                    }\n                    const mediaType = result.info.is_audio ? \"audio\" : result.info.resource_type;\n                    const media_payload = {\n                        public_id: result.info.public_id,\n                        show_id: this.showID,\n                        media_type: mediaType\n                    };\n                    axios.post(\"media_items\", media_payload);\n                }\n            }.bind(this));\n    }\n\n    deleteMediaItem(publicID) {\n        const publicIDWithoutFolder = publicID.replace(\"gmg/\", \"\");\n        axios.delete(`media_items/${publicIDWithoutFolder}`).then(function(response) {\n            if (response.data.result === \"ok\") {\n                const photos = this.state.photos.filter(photo => photo.public_id !== response.data.public_id);\n                this.setState({\n                    photos: photos\n                });\n            }\n        }.bind(this));\n    }\n\n    playSong(publicID, title) {\n        this.setState({\n            musicPlayer: {\n                publicID: publicID,\n                title: title\n            }\n        });\n    }\n\n    render() {\n        let show = <div></div>\n        if (this.state.loading) {\n            show = <Loader active>Loading</Loader>\n        } else if (this.state.loadedShow === \"notfound\") {\n            show = (\n                <div>\n                    <h3>404 Not Found</h3>\n                </div>\n            )\n        } else if (this.state.loadedShow.venue && this.state.loadedYouTubeVideos && this.state.songsList.length > 0) {\n            let date = new Date(this.state.loadedShow.date + \" EST\").toLocaleDateString();\n\n            let firstSetSongs = this.createSongLinks(1);\n            let secondSet = this.createSongLinks(2);\n            let encore = this.createSongLinks(3);\n\n            const YOUTUBE_CONSTANT = \"watch?v=\";\n            const youTubeVideos = this.state.youTubeVideos.map( (video) => {\n                let sliceNumber = video.url.indexOf(YOUTUBE_CONSTANT) + YOUTUBE_CONSTANT.length\n                let id = video.url.slice(sliceNumber);\n                return {\n                    id: id,\n                    title: video.title\n                }\n            });\n\n            show = (\n                <CSSTransitionGroup\n                    transitionName=\"fade\"\n                    transitionAppear={true}\n                    transitionAppearTimeout={500}\n                    transitionEnter={false}\n                    transitionLeave={false}>\n                    <div className=\"Show\">\n                            <h1>{date}</h1>\n                            <h2>{this.state.loadedShow.venue}</h2>\n                            <p><span className=\"set-title\">SET 1: </span>{firstSetSongs}</p>\n                            {secondSet ? (<p><span className=\"set-title\">SET 2: </span>{secondSet}</p>) : null}\n                            {encore ? (<p><span className=\"set-title\">ENCORE: </span>{encore}</p>) : null}\n                            {localStorage.getItem('auth_token') ? \n                                <div className=\"button-group\">\n                                    <Link to={'/upload/' + this.showID}>        \n                                        <Button>Edit</Button>\n                                    </Link>\n                                    <Button onClick={this.openUploadWidget.bind(this)}>Upload Media</Button>\n                                    <AddMediaDialog handleSubmit={this.handleSubmit.bind(this)}/>\n                                </div> : \"\"}\n                            <div className=\"gallery\">\n                                <CloudinaryContext cloudName=\"gmg-archive-project\">\n                                    <div className=\"photos\">\n                                        {\n                                            this.state.photos.map((data, i) => {\n                                                return (\n                                                    <Photo\n                                                        key={i}\n                                                        createdAt={data.created_at}\n                                                        publicID={data.public_id}\n                                                        deleteMediaItem={this.deleteMediaItem.bind(this, data.public_id)}\n                                                    />\n                                                )\n                                            })\n                                        }\n                                    </div>\n                                    <div className=\"videos\">\n                                        {\n                                            this.state.videos.map((data, i) => {\n                                                return (\n                                                    <Video\n                                                        key={i}\n                                                        createdAt={data.created_at}\n                                                        publicID={data.public_id}\n                                                        deleteMediaItem={this.deleteMediaItem.bind(this, data.public_id)}\n                                                    />\n                                                )\n                                            })\n                                        }\n                                    </div>\n                                    {/* </Card.Group> */}\n                                    {/* <MusicPlayer \n                                        publicID={this.state.musicPlayer.publicID}\n                                        title={this.state.musicPlayer.title}\n                                    />\n                                    <div className=\"audio-recs\">\n                                        {this.state.audioRecs.map(data => {\n                                            return (\n                                                <AudioRec\n                                                    key={data.id}\n                                                    id={data.id}\n                                                    publicID={data.public_id}\n                                                    title={data.title}\n                                                    playSong={this.playSong.bind(this, data.public_id, data.title)} />\n\n                                            )\n                                        })}\n                                    </div> */}\n                                </CloudinaryContext>\n                                <div className=\"clearfix\"></div>\n                            </div>\n                            <div className=\"youtube-section\">\n                                {youTubeVideos.map( (video, i) => \n                                    <div className=\"youtube-video\" key={i}>\n                                        <h3>{video.title}</h3>\n                                        <Embed \n                                            id={video.id}\n                                            placeholder=\"https://f4.bcbits.com/img/a3887907904_16.jpg\"\n                                            source=\"youtube\"\n                                            iframe={{\n                                                allowFullScreen: true,\n                                                style: {\n                                                padding: 10,\n                                                },\n                                            }}>\n                                        </Embed>\n                                    </div>\n                                )}\n                            </div>\n                    </div>\n                </CSSTransitionGroup>\n            );\n        }\n        return show;        \n    }\n}\n\nexport default Show;\n\n\n{/* <Card className=\"audio-card\" color=\"orange\" onClick={this.playSong.bind(this, data.public_id)}> */}\n    {/* <Image \n        publicId={data.public_id+\".png\"} \n        resourceType=\"video\" \n        height=\"100\" \n        width=\"250\" \n        flags=\"waveform\"\n        color=\"white\"\n        background=\"black\"/> */}\n    {/* <Card.Content> */}\n        {/* <Card.Header className=\"audio-card\">Song Title</Card.Header> */}\n        {/* <Card.Description> */}\n\n        {/* </Card.Description> */}\n    {/* </Card.Content> */}\n{/* </Card> */}\n\n{/* <div className=\"desc\">Created at {data.created_at}</div> */}","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/Stats/Stats.js",["137","138","139"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Loader } from 'semantic-ui-react'\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nimport './Stats.scss';\n\nclass Stats extends Component {\n    state = {\n        statSelected: \"\",\n        currentStatArray: [],\n        loading: false\n    }\n\n    handleSelectStat(e, valueObj) {\n        const selectedObj = valueObj.options.find(option => option.value === valueObj.value);\n        this.setState({\n            loading: true,\n            statSelected: selectedObj\n        });\n        // axios.get(selectedObj.path).then(response => {\n        const params = {\n            params: {\n                stat: selectedObj.value\n            }\n        }\n        axios.get(\"songs\", params).then(response => {\n            this.setState({\n                currentStatArray: response.data,\n                loading: false\n            });\n        });\n    }\n\n    render() {\n\n        const statsList = [\n            {\n                text: \"Times Played\",\n                value: \"times_played\",\n                path: \"all_times_played\"\n            },\n            {\n                text: \"Percentage of Shows\",\n                value: \"percentage_played\",\n                path: \"all_percentage_played\"\n            },\n            {\n                text: \"First Set Openers\",\n                value: \"first_set_openers\",\n                path: \"all_set_openers/1\"\n            },\n            {\n                text: \"Second Set Openers\",\n                value: \"second_set_openers\",\n                path: \"all_set_openers/2\"\n            },\n            {\n                text: \"First Set Closers\",\n                value: \"first_set_closers\",\n                path: \"all_set_closers/1\"\n            },\n            {\n                text: \"Second Set Closers\",\n                value: \"second_set_closers\",\n                path: \"all_set_closers/2\"\n            },\n            {\n                text: \"Encore Appearances\",\n                value: \"encore_appearances\",\n                path: \"all_encore_appearances\"\n            },\n        ]\n\n        const selectStatDropdown = () => {\n            return <Dropdown\n                placeholder='Select Stat'\n                selection\n                options={statsList}\n                onChange={this.handleSelectStat.bind(this)}\n            />\n        }\n\n        let showPercentSign = () => {\n            return this.state.statSelected.value === \"showPercentage\"\n        }\n\n        // let songList;\n\n        // if (this.state.loading) {\n        //     songList = <div>Loading...</div>\n        // } else {\n        //     songList = this.state.currentStatArray.map((song, i) => {\n        //         return <div className=\"single-song\" key={i}>\n        //             <Link to={\"/song/\" + song.id}>{song.title}</Link> - {song.value}{showPercentSign() ? \"%\" : \"\"}\n        //         </div>\n        //     });\n        // }\n\n        const chartOptions = {\n            title: {\n                text: \"Songs\",\n            },\n            colors: [\"orange\"],\n            chart: {\n                height: (this.state.currentStatArray.length * 20) + 100,\n                type: \"bar\"\n            },\n            xAxis: {\n                categories: this.state.loading? [] : this.state.currentStatArray.map(song => song.title)\n            },\n            yAxis: {\n                title: {\n                    text: null\n                }\n            },\n            series: [{\n                name: this.state.statSelected.text || \"\",\n                data: this.state.loading? [] : this.state.currentStatArray.map(song => {\n                    return {\n                        y: song.value,\n                        key: song.id\n                    }\n                })\n            }],\n            plotOptions: {\n                series: {\n                    cursor: 'pointer',\n                    point: {\n                        events: {\n                            click: (event) => {\n                                this.props.history.push(`/song/${event.point.key}`);\n                            }\n                        }\n                    }\n                }\n            },\n        };\n\n        let getChart = () => {\n            let chart = \"\"\n            if (this.state.statSelected) {\n                if (this.state.loading) {\n                    chart = <Loader active>Loading</Loader>;\n                } else {\n                    chart = \n                        <HighchartsReact\n                            highcharts={Highcharts}\n                            options={chartOptions}\n                            immutable={true}\n                        />;\n                }\n            }\n            return chart;\n        }\n\n        return (\n            \n            <section className=\"Stats\">\n                <h1>Statistics</h1>\n                <div className=\"statistics\">\n                    {selectStatDropdown()}\n                </div>\n                {getChart()}\n            </section>\n        );\n    }\n\n}\n\nexport default Stats;","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/LogIn/LogIn.js",["140"],"import React, { Component } from 'react';\nimport { Button, Form, Input, Message } from 'semantic-ui-react'\nimport { Redirect } from 'react-router-dom';\n\nimport './LogIn.scss';\n\nclass LogIn extends Component {\n    state = {\n        success: false,\n        invalidLogIn: false,\n        email: \"\",\n        password: \"\"\n    }\n\n    handleChange (event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleLogIn() {\n        let credentials = {\n            email: this.state.email,\n            password: this.state.password\n        }\n        this.props.handleLogIn(credentials).then(function() {\n            this.setState({\n                success: true,\n                invalidLogIn: false\n            });\n            window.setTimeout(() => {\n                this.props.history.push(\"/shows\");\n            }, 2000);\n        }.bind(this)).catch(() => {\n            this.setState({\n                success: false,\n                invalidLogIn: true\n            });\n        })\n    }\n\n    validateForm() {\n        return (\n            this.state.email.length > 0 &&\n            this.state.password.length > 0\n        )\n    }\n\n    render() {    \n        return (\n            <section className=\"LogIn\">\n                <Form success={this.state.success} error={this.state.invalidLogIn}>\n                    <Form.Field>\n                        <Input\n                            name='email'\n                            label='Email'\n                            type='email'\n                            placeholder='joe@schmoe.com' \n                            onChange={this.handleChange.bind(this)}\n                        />\n                    </Form.Field>\n                    <Form.Field>\n                        <Input\n                            name='password'\n                            label='Password'\n                            type='password'\n                            onChange={this.handleChange.bind(this)}\n                        />\n                    </Form.Field>\n                    <Message\n                        success\n                        header=\"Wepa!\"\n                        content=\"You have successfully logged in.\"\n                    />\n                    <Message\n                        error\n                        header=\"Uh oh.\"\n                        content=\"You email or password is incorrect.\"\n                    />\n                    <Button \n                        onClick={this.handleLogIn.bind(this)}\n                        disabled={!this.validateForm()}\n                    >Log In</Button>\n                    <br/>\n                    {/* <Link to={\"/signup\"}>Sign Up</Link> */}\n                </Form>\n\n            </section>\n        );\n    }\n}\n\nexport default LogIn;","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/pages/Parent/SignUp/SignUp.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/axios.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/SongTitle/SongTitle.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/ShowCard/ShowCard.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/FilterDropdown/FilterDropdown.js",["141"],"import React from 'react';\nimport { Dropdown, Form } from 'semantic-ui-react';\n\nconst FilterDropdown = (props) =>\n    <Form.Select\n        // icon=\"filter\"\n        // fluid\n        // labeled\n        // selection\n        clearable\n        // floating\n        // button\n        // className=\"icon\"\n        placeholder={props.placeholder}\n        onClick={props.onClick}\n        options={props.options}\n        onChange={props.onChange}/>\n\nexport default FilterDropdown;\n","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/DeleteButton/DeleteButton.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/AddMediaDialog/AddMediaDialog.js",[],"/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/Photo/Photo.js",["142","143"],"import React from 'react';\nimport { Button, Divider } from 'semantic-ui-react';\nimport {Image, Transformation} from 'cloudinary-react';\nimport moment from 'moment';\nimport \"./Photo.scss\";\n\nconst Photo = (props) =>\n    <div className=\"photo-container\" key={props.publicID}>\n        <a target=\"_blank\" href={`https://res.cloudinary.com/gmg-archive-project/image/upload/${props.publicID}.jpg`}>\n            <Image className=\"image\" publicId={props.publicID}>\n                <Transformation\n                    crop=\"scale\"\n                    // width=\"300\"\n                    height=\"250\"\n                    dpr=\"auto\"\n                    responsive_placeholder=\"blank\"\n                />\n            </Image>\n        </a>\n        {localStorage.getItem('auth_token') ? \n            <Button className=\"overlay button\"\n                icon=\"delete\"\n                onClick={props.deleteMediaItem}\n            ></Button> : \"\"}\n        <div className=\"overlay info\">Uploaded {moment(props.createdAt).format('MM/DD/YY, h:mm a')}</div>\n    </div>\n\nexport default Photo;\n","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/MusicPlayer/MusicPlayer.js",["144","145","146","147","148","149"],"import React, { Component } from 'react'\nimport {Audio} from 'cloudinary-react';\nimport {Icon} from 'semantic-ui-react';\nimport _ from 'lodash';\nimport \"./MusicPlayer.scss\"\n\nclass MusicPlayer extends Component {\n\n    state = {\n        publicID: \"\",\n        loadingSong: false,\n        title: \"\"\n    }\n\n    componentDidMount() {\n        const player = document.getElementById('player');\n        player.addEventListener(\"canplaythrough\", () => {\n            this.setState({\n                loadingSong: false\n            });\n        });\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (this.props.publicID !== nextProps.publicID) {\n            this.setState({\n                publicID: nextProps.publicID,\n                title: nextProps.title,\n                loadingSong: true\n            });\n            this.load();\n        }\n        return true;\n    }\n\n    load() {\n        const player = document.getElementById('player');\n        if (player) {\n            player.load();\n        }\n    }\n\n    play() {\n        const player = document.getElementById('player');\n        player.play();\n    }\n\n    pause() {\n        const player = document.getElementById('player');\n        player.pause();\n    }\n    \n    render() {\n        let songTitle;\n        if (this.state.loadingSong) {\n            songTitle = <Icon className=\"music-loader\" loading name=\"spinner\" size=\"big\" />\n            this.load();\n        } else if (this.state.publicID) {\n            songTitle = <div className=\"now-playing\">Now Playing: {this.state.title}</div>;\n        }\n        let player =\n            <Audio \n                id=\"player\"\n                sourceTypes={['wav', 'mp3']}\n                controls={!this.state.loadingSong && !_.isEmpty(this.state.publicID)}\n                publicId={this.state.publicID}\n                fallback=\"Cannot play audio\"/>\n\n        return <div className=\"music-player\">\n            {songTitle}\n            {player}\n        </div>\n        \n    }\n}\n\nexport default MusicPlayer;\n\n{/* <div>  */}\n{/* <button onClick={this.play.bind(this)}>Play</button>  */}\n{/* <button onClick={this.pause.bind(this)}>Pause</button>  */}\n{/* <button onClick=\"document.getElementById('player').volume += 0.1\">Vol +</button>  */}\n{/* <button onClick=\"document.getElementById('player').volume -= 0.1\">Vol -</button>  */}\n{/* </div> */}","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/Video/Video.js",["150"],"import React from 'react';\nimport { Button, Divider } from 'semantic-ui-react';\nimport {Video, Transformation} from 'cloudinary-react';\nimport moment from 'moment';\nimport \"./Video.scss\";\n\nconst VideoClip = (props) =>\n    <div className=\"video-container\" key={props.publicID}>\n            <Video \n                className=\"video\" \n                cloud_name=\"gmg-archive-project\" \n                format=\"mp4\"\n                controls\n                publicId={props.publicID}>\n                <Transformation\n                    background=\"black\"\n                    crop=\"pad\"\n                    width=\"1600\"\n                    height=\"1200\"\n                    // preload=\"none\"\n                    // dpr=\"auto\"\n                    // responsive_placeholder=\"blank\"\n                />\n            </Video>\n        <Button className=\"overlay button\"\n            icon=\"delete\"\n            onClick={props.deleteMediaItem}\n        ></Button>\n        <div className=\"overlay info\">Uploaded {moment(props.createdAt).format('MM/DD/YY, h:mm a')}</div>\n    </div>\n\nexport default VideoClip;\n","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/components/AudioRec/AudioRec.js",["151"],"import React, {Component} from 'react';\nimport { Icon, Input } from 'semantic-ui-react';\nimport axios from 'axios';\nimport \"./AudioRec.scss\";\n\nclass AudioRec extends Component {\n    state = {\n        editMode: false,\n        newTitle: \"\"\n    };\n\n    editTitle() {\n        this.setState({\n            editMode: true\n        });\n    }\n\n    handleChange(value) {\n        this.setState({\n            newTitle: value\n        });\n    }\n\n    handleBlur() {\n        axios.put('media_items/' + this.props.id, {title: this.state.newTitle})\n        this.setState({\n            editMode: false\n        })\n    }\n\n    render() {\n        let audioRec;\n        let title = this.state.newTitle || this.props.title;\n\n        if (this.state.editMode) {\n            audioRec = \n                <Input \n                    value={title}\n                    onChange={(event) => this.handleChange(event.target.value)} \n                    onBlur={this.handleBlur.bind(this)}/>\n        } else {\n            audioRec = \n                <div className=\"AudioRec\">\n                    <a onClick={this.props.playSong}>{title} </a>\n                    <Icon name=\"pencil\" onClick={this.editTitle.bind(this)}/>\n                </div>;\n        }\n        return audioRec;\n    }\n}\n\nexport default AudioRec;\n","/Users/ericschwartz/dev/projects/gmg-archive/gmg-archive/src/FormatHelper.js",["152"],"export default {\n    // formatSetlist (setlist) {\n    //     if (setlist) {\n    //         return setlist.replace(/[\\n\\r]/g, ', ');\n    //     }\n    // }\n\n    formatSetlist(setlist, setNumber) {\n        if (setlist) {\n            return setlist\n                .filter(song => song.set === setNumber)\n                .map((song, i, individualSet) => {\n                    return (i === individualSet.length - 1) ? song.title : `${song.title}, `\n                });\n        }\n    }\n}",["153","154"],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":2,"column":34,"nodeType":"161","messageId":"162","endLine":2,"endColumn":40},{"ruleId":"159","severity":1,"message":"163","line":4,"column":31,"nodeType":"161","messageId":"162","endLine":4,"endColumn":39},{"ruleId":"159","severity":1,"message":"164","line":4,"column":41,"nodeType":"161","messageId":"162","endLine":4,"endColumn":50},{"ruleId":"159","severity":1,"message":"165","line":5,"column":8,"nodeType":"161","messageId":"162","endLine":5,"endColumn":9},{"ruleId":"166","severity":1,"message":"167","line":77,"column":19,"nodeType":"168","messageId":"169","endLine":77,"endColumn":21},{"ruleId":"159","severity":1,"message":"170","line":4,"column":16,"nodeType":"161","messageId":"162","endLine":4,"endColumn":24},{"ruleId":"159","severity":1,"message":"171","line":4,"column":49,"nodeType":"161","messageId":"162","endLine":4,"endColumn":55},{"ruleId":"159","severity":1,"message":"172","line":4,"column":16,"nodeType":"161","messageId":"162","endLine":4,"endColumn":26},{"ruleId":"159","severity":1,"message":"173","line":8,"column":8,"nodeType":"161","messageId":"162","endLine":8,"endColumn":19},{"ruleId":"159","severity":1,"message":"174","line":9,"column":8,"nodeType":"161","messageId":"162","endLine":9,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":324,"column":1,"nodeType":"177","messageId":"178","endLine":324,"endColumn":104},{"ruleId":"175","severity":1,"message":"176","line":325,"column":5,"nodeType":"177","messageId":"178","endLine":332,"endColumn":33},{"ruleId":"175","severity":1,"message":"176","line":333,"column":5,"nodeType":"177","messageId":"178","endLine":333,"endColumn":27},{"ruleId":"175","severity":1,"message":"176","line":334,"column":9,"nodeType":"177","messageId":"178","endLine":334,"endColumn":77},{"ruleId":"175","severity":1,"message":"176","line":335,"column":9,"nodeType":"177","messageId":"178","endLine":335,"endColumn":35},{"ruleId":"175","severity":1,"message":"176","line":337,"column":9,"nodeType":"177","messageId":"178","endLine":337,"endColumn":36},{"ruleId":"175","severity":1,"message":"176","line":338,"column":5,"nodeType":"177","messageId":"178","endLine":338,"endColumn":28},{"ruleId":"175","severity":1,"message":"176","line":339,"column":1,"nodeType":"177","messageId":"178","endLine":339,"endColumn":16},{"ruleId":"175","severity":1,"message":"176","line":341,"column":1,"nodeType":"177","messageId":"178","endLine":341,"endColumn":65},{"ruleId":"159","severity":1,"message":"179","line":3,"column":10,"nodeType":"161","messageId":"162","endLine":3,"endColumn":14},{"ruleId":"159","severity":1,"message":"180","line":7,"column":10,"nodeType":"161","messageId":"162","endLine":7,"endColumn":28},{"ruleId":"159","severity":1,"message":"181","line":87,"column":13,"nodeType":"161","messageId":"162","endLine":87,"endColumn":28},{"ruleId":"159","severity":1,"message":"182","line":3,"column":10,"nodeType":"161","messageId":"162","endLine":3,"endColumn":18},{"ruleId":"159","severity":1,"message":"170","line":2,"column":10,"nodeType":"161","messageId":"162","endLine":2,"endColumn":18},{"ruleId":"159","severity":1,"message":"183","line":2,"column":18,"nodeType":"161","messageId":"162","endLine":2,"endColumn":25},{"ruleId":"184","severity":1,"message":"185","line":9,"column":9,"nodeType":"186","endLine":9,"endColumn":119},{"ruleId":"175","severity":1,"message":"176","line":79,"column":1,"nodeType":"177","messageId":"178","endLine":79,"endColumn":15},{"ruleId":"175","severity":1,"message":"176","line":80,"column":1,"nodeType":"177","messageId":"178","endLine":80,"endColumn":62},{"ruleId":"175","severity":1,"message":"176","line":81,"column":1,"nodeType":"177","messageId":"178","endLine":81,"endColumn":64},{"ruleId":"175","severity":1,"message":"176","line":82,"column":1,"nodeType":"177","messageId":"178","endLine":82,"endColumn":90},{"ruleId":"175","severity":1,"message":"176","line":83,"column":1,"nodeType":"177","messageId":"178","endLine":83,"endColumn":90},{"ruleId":"175","severity":1,"message":"176","line":84,"column":1,"nodeType":"177","messageId":"178","endLine":84,"endColumn":15},{"ruleId":"159","severity":1,"message":"183","line":2,"column":18,"nodeType":"161","messageId":"162","endLine":2,"endColumn":25},{"ruleId":"187","severity":1,"message":"188","line":44,"column":21,"nodeType":"186","endLine":44,"endColumn":54},{"ruleId":"189","severity":1,"message":"190","line":1,"column":1,"nodeType":"191","endLine":17,"endColumn":2},{"ruleId":"155","replacedBy":"192"},{"ruleId":"157","replacedBy":"193"},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-unused-vars","'FadeIn' is defined but never used.","Identifier","unusedVar","'TextArea' is defined but never used.","'Accordion' is defined but never used.","'_' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Dropdown' is defined but never used.","'Dimmer' is defined but never used.","'useHistory' is defined but never used.","'MusicPlayer' is defined but never used.","'AudioRec' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Link' is defined but never used.","'CSSTransitionGroup' is defined but never used.","'showPercentSign' is assigned a value but never used.","'Redirect' is defined but never used.","'Divider' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["194"],["195"],"no-global-assign","no-unsafe-negation"]